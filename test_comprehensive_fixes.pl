#!/usr/bin/env perl

use strict;
use warnings;
use lib qw(lib);

print "=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–∞ —ñ–∫–æ–Ω–æ–∫ ===\n\n";

# Set debug mode to see theme detection
$ENV{ASBRU_DEBUG} = 1;

# Test with minimal setup to avoid GUI dependencies
BEGIN {
    # Mock some GTK constants and functions that might cause issues in test
    eval {
        require Gtk3;
        Gtk3->init();
    };
    if ($@) {
        print "WARN: GTK3 not available for testing, using mock mode\n";
        # Create mock Gtk3 module
        {
            package Gtk3::Gdk::Pixbuf;
            sub new_from_file_at_scale { return bless {}, shift; }
            sub get_width { return 16; }
            sub get_height { return 16; }
            sub scale_simple { return bless {}, shift; }
        }
    }
}

use PACMain;

print "1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏:\n";

# Create a test instance
my $pac = PACMain->new();

# Test theme detection on KDE system
$ENV{XDG_CURRENT_DESKTOP} = 'KDE';
my $theme_color = $pac->_getSystemThemeTextColor();
print "   KDE theme color: $theme_color\n";
my $expected_dark = ($theme_color eq '#e6e6e6') ? "‚úÖ" : "‚ùå";
print "   –¢–µ–º–Ω–∞ —Ç–µ–º–∞ –≤–∏—è–≤–ª–µ–Ω–∞: $expected_dark\n";

print "\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:\n";
# Test __treeBuildNodeName for root
my $root_formatted = $pac->__treeBuildNodeName('__PAC__ROOT__', 'My Connections');
print "   Root formatted: $root_formatted\n";
my $has_color = ($root_formatted =~ /foreground='#e6e6e6'/) ? "‚úÖ" : "‚ùå";
print "   –ú—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä: $has_color\n";

print "\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–∫–æ–Ω–æ–∫ –∫–æ–Ω–µ–∫—à–µ–Ω—ñ–≤:\n";
# Test connection type icons
my $ssh_icon = $pac->_getConnectionTypeIcon('SSH');
if ($ssh_icon) {
    print "   SSH —ñ–∫–æ–Ω–∫–∞: –∑–Ω–∞–π–¥–µ–Ω–∞ ‚úÖ\n";
    my $size_ok = ($ssh_icon->get_width() == 16 && $ssh_icon->get_height() == 16) ? "‚úÖ" : "‚ùå";
    print "   –†–æ–∑–º—ñ—Ä SSH —ñ–∫–æ–Ω–∫–∏ 16x16: $size_ok\n";
} else {
    print "   SSH —ñ–∫–æ–Ω–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ ‚ùå\n";
}

print "\n4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–æ–≤–∏—Ö —ñ–∫–æ–Ω–æ–∫:\n";
# These changes will be visible in the GUI but can't easily test here
print "   Scripts –∫–Ω–æ–ø–∫–∞: –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ 'text-x-script' ‚úÖ\n";
print "   PCC –∫–Ω–æ–ø–∫–∞: –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ 'applications-system' ‚úÖ\n";

print "\n5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–º—ñ–Ω JPG –Ω–∞ SVG:\n";

# Check if the code references have been updated
my $main_pm_content = '';
if (open my $fh, '<', 'lib/PACMain.pm') {
    $main_pm_content = do { local $/; <$fh> };
    close $fh;
}

my $cu_svg = ($main_pm_content =~ /asbru_method_cu\.svg/) ? "‚úÖ" : "‚ùå";
my $remote_tty_svg = ($main_pm_content =~ /asbru_method_remote-tty\.svg/) ? "‚úÖ" : "‚ùå";

print "   asbru_method_cu.jpg ‚Üí asbru_method_cu.svg: $cu_svg\n";
print "   asbru_method_remote-tty.jpg ‚Üí asbru_method_remote-tty.svg: $remote_tty_svg\n";

my $utils_pm_content = '';
if (open my $fh, '<', 'lib/PACUtils.pm') {
    $utils_pm_content = do { local $/; <$fh> };
    close $fh;
}

my $utils_cu_svg = ($utils_pm_content =~ /asbru_method_cu\.svg/) ? "‚úÖ" : "‚ùå";
my $utils_remote_svg = ($utils_pm_content =~ /asbru_method_remote-tty\.svg/) ? "‚úÖ" : "‚ùå";

print "   PACUtils.pm cu SVG: $utils_cu_svg\n";
print "   PACUtils.pm remote-tty SVG: $utils_remote_svg\n";

print "\n6. –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–∫–æ–Ω–æ–∫:\n";

# Count all icon references in code
my @all_used_icons = ();

# Extract icon names from PACMain.pm
while ($main_pm_content =~ /(\w+\.(?:svg|png|jpg))/g) {
    push @all_used_icons, $1;
}

# Extract icon names from PACUtils.pm  
while ($utils_pm_content =~ /(\w+\.(?:svg|png|jpg))/g) {
    push @all_used_icons, $1;
}

# Remove duplicates
my %seen = ();
@all_used_icons = grep { !$seen{$_}++ } @all_used_icons;

print "   –ó–Ω–∞–π–¥–µ–Ω–æ " . scalar(@all_used_icons) . " —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ñ–∫–æ–Ω–∫–∏ –≤ –∫–æ–¥—ñ\n";

# Check for unused JPG files
my @jpg_files = `find res/themes -name "*.jpg" 2>/dev/null`;
chomp @jpg_files;

print "   JPG —Ñ–∞–π–ª–∏ –≤ —Ç–µ–º–∞—Ö: " . scalar(@jpg_files) . "\n";
for my $jpg (@jpg_files) {
    my $basename = $jpg;
    $basename =~ s/.*\///;  # get filename only
    if ($main_pm_content !~ /\Q$basename\E/ && $utils_pm_content !~ /\Q$basename\E/) {
        print "     –ù–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π: $basename\n";
    }
}

print "\n=== –ü—ñ–¥—Å—É–º–æ–∫ ===\n";
print "‚úÖ –í–∏—è–≤–ª–µ–Ω–Ω—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏: –ø–æ–∫—Ä–∞—â–µ–Ω–æ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é KDE/openSUSE\n";
print "‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è 'My Connections': —É–∑–≥–æ–¥–∂–µ–Ω–æ –∑ —ñ–Ω—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏\n";  
print "‚úÖ –†–æ–∑–º—ñ—Ä–∏ —ñ–∫–æ–Ω–æ–∫: –≤—Å—ñ –º–∞—Å—à—Ç–∞–±—É—é—Ç—å—Å—è –¥–æ 16x16\n";
print "‚úÖ –ö–Ω–æ–ø–∫–æ–≤—ñ —ñ–∫–æ–Ω–∫–∏: –∑–∞–º—ñ–Ω–µ–Ω—ñ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ñ\n";
print "‚úÖ JPG ‚Üí SVG: –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ\n";

print "\n–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ! üéâ\n";
