#!/bin/sh

getCompressedEnv() {
    echo "LD_LIBRARY_PATH='${LD_LIBRARY_PATH}' PERL5LIB='${PERL5LIB}' GI_TYPELIB_PATH='${GI_TYPELIB_PATH}' XDG_DATA_DIRS='${XDG_DATA_DIRS}' XDG_CONFIG_DIRS='${XDG_CONFIG_DIRS}' GTK_PATH='${GTK_PATH}' GTK_EXE_PREFIX='${GTK_EXE_PREFIX}' GTK_DATA_PREFIX='${GTK_DATA_PREFIX}' GTK_EXE_PREFIX='${GTK_EXE_PREFIX}' GDK_PIXBUF_MODULE_FILE='${GDK_PIXBUF_MODULE_FILE}' GTK_IM_MODULE='${GTK_IM_MODULE}' GTK_IM_MODULE_FILE='${GTK_IM_MODULE_FILE}' PANGO_LIBDIR='${PANGO_LIBDIR}'"
}

export ASBRU_ENV_FOR_EXTERNAL="$(getCompressedEnv)"

export ASBRU_IS_APPIMAGE="1"

###############################################
# Display backend: prefer Xwayland on Wayland #
###############################################
# If running under Wayland, force GTK to use the X11 backend so embedding works via Xwayland.
if [ -n "${WAYLAND_DISPLAY}" ] || [ "${XDG_SESSION_TYPE}" = "wayland" ]; then
    if [ "${GDK_BACKEND}" != "x11" ] && [ -z "${ASBRU_NO_XWAYLAND}" ]; then
        export GDK_BACKEND="x11"
        export ASBRU_XWAYLAND="1"
    fi
fi

###############################################
# Sanitize Perl environment                   #
###############################################
# Avoid leaking host Perl paths which can cause XS API mismatches (e.g. Cwd.c).
unset PERL5LIB PERLLIB PERL5OPT PERL_MM_OPT PERL_MB_OPT PERL_LOCAL_LIB_ROOT

# Keep runtime search paths minimal and self-contained, but include Perl CORE for libperl.so.
# Ensure our own libraries (e.g., libcairo, gobject, pango) resolve from inside the AppImage to avoid
# mixing host glibc libs with our musl-built stack, which causes loader errors.
# Note: We still avoid leaking these paths to external commands; only the app runtime uses them.
APP_USR_LIBS="${APPDIR}/usr/lib:${APPDIR}/usr/lib64:${APPDIR}/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib/perl5/core_perl/CORE:${APPDIR}/lib:${APPDIR}/usr/local/lib:${APP_USR_LIBS}"

# Ensure Perl core modules resolve inside the AppImage by prepending our core_perl paths.
# Then add our app, site, and vendor libs. Keep our paths before any host paths Perl may append.
export PERL5LIB="${APPDIR}/usr/lib/perl5/core_perl:${APPDIR}/usr/share/perl5/core_perl:${APPDIR}/opt/asbru-cm/lib:${APPDIR}/opt/asbru-cm/lib/ex:${APPDIR}/opt/asbru-cm/lib/edit:${APPDIR}/usr/local/lib/perl5/site_perl:${APPDIR}/usr/local/share/perl5/site_perl:${APPDIR}/usr/lib/perl5/vendor_perl:${APPDIR}/usr/share/perl5/vendor_perl"

export GI_TYPELIB_PATH="${APPDIR}/usr/lib/girepository-1.0"

export XDG_DATA_DIRS="${APPDIR}/usr/local/share/:${APPDIR}/usr/share/"
export XDG_CONFIG_DIRS="${APPDIR}/etc/xdg"

export GTK_PATH="${APPDIR}/usr/lib/gtk-3.0"
export GTK_EXE_PREFIX="${APPDIR}/usr"
export GTK_DATA_PREFIX="${APPDIR}/usr"
# Avoid noisy host GTK module load failures (colorreload-gtk-module, window-decorations-gtk-module) when not present
export GTK_MODULES=""

export GDK_PIXBUF_MODULEDIR="${APPDIR}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders"
export GDK_PIXBUF_MODULE_FILE="${APPDIR}/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"

export GTK_IM_MODULE="${APPDIR}/usr/lib/gtk-3.0/3.0.0/immodules"
export GTK_IM_MODULE_FILE="${APPDIR}/usr/lib/gtk-3.0/3.0.0/immodules.cache"

export PANGO_LIBDIR="${APPDIR}/usr/lib"

export ASBRU_ENV_FOR_INTERNAL="$(getCompressedEnv)"

cd "${APPDIR}" || exit 1

# Optional: tiny diagnostics in DEBUG to validate cairo resolves from AppImage
if [ "${ASBRU_LOG_LEVEL}" = "DEBUG" ]; then
    echo "[AppRun] LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >&2
    if command -v ldd >/dev/null 2>&1; then
        echo "[AppRun] libcairo in AppImage:" >&2
        ldd "${APPDIR}/usr/lib/libcairo.so.2" 2>&1 | sed 's/^/[AppRun] /' >&2 || true
    fi
fi

exec "${APPDIR}/usr/bin/perl" "${APPDIR}/opt/asbru-cm/asbru-cm" $@
